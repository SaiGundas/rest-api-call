name: Build and Deploy to Sandbox

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CA_CLIENT_ID: ${{ secrets.CA_CLIENT_ID }}
      CA_CLIENT_SECRET: ${{ secrets.CA_CLIENT_SECRET }}

    steps:
      # Checkout the code
      - uses: actions/checkout@v4

      # Cache Maven dependencies
      - uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Set up JDK 11
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'

      # Print effective settings (optional)
      - name: Print effective-settings (optional)
        run: mvn help:effective-settings

      # Build the application with Maven
      - name: Build with Maven
        run: mvn -B package -s .maven/settings.xml

      # Stamp the artifact file name with commit hash
      - name: Stamp artifact file name with commit hash
        run: |
          artifactName1=$(ls target/*.jar | head -1)
          commitHash=$(git rev-parse --short "$GITHUB_SHA")
          artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
          mv $artifactName1 $artifactName2

      # Upload the artifact
      - name: Upload artifact 
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: target/*.jar

  upload:
    needs: build
    runs-on: ubuntu-latest
    env:
      CA_CLIENT_ID: ${{ secrets.CA_CLIENT_ID }}
      CA_CLIENT_SECRET: ${{ secrets.CA_CLIENT_SECRET }}

    steps:
      # Checkout the code
      - uses: actions/checkout@v3

      # Cache Maven dependencies
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Download the artifact
      - uses: actions/download-artifact@v3
        with:
          name: artifacts

      # Upload the artifact to MuleSoft Exchange
      - name: Upload to MuleSoft Exchange
        run: |
          artifactName=$(ls *.jar | head -1)
          if [ -z "$artifactName" ]; then
            echo "Error: No artifact found to upload."
            exit 1
          fi
          echo "Uploading $artifactName to MuleSoft Exchange..."
          mvn deploy \
            -s .maven/settings.xml \
            -Dmule.artifact=$artifactName \
            -DskipTests

  deploy:
    needs: upload
    runs-on: ubuntu-latest
    env:
      CA_CLIENT_ID: ${{ secrets.CA_CLIENT_ID }}
      CA_CLIENT_SECRET: ${{ secrets.CA_CLIENT_SECRET }}

    steps:
      # Checkout the code
      - uses: actions/checkout@v3

      # Cache Maven dependencies
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Download the artifact
      - uses: actions/download-artifact@v3
        with:
          name: artifacts

      # Deploy the artifact to Sandbox
      - name: Deploy to Sandbox
        run: |
          artifactName=$(ls *.jar | head -1)
          if [ -z "$artifactName" ]; then
            echo "Error: No artifact found to deploy."
            exit 1
          fi
          echo "Deploying $artifactName to MuleSoft Sandbox..."
          mvn deploy -DmuleDeploy \
            -Dmule.artifact=$artifactName \
            -s .maven/settings.xml \
            -DskipTests \
            -DskipDeploymentVerification="true"
